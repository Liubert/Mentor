import { Component, createElement } from 'react';
import PropTypes from 'prop-types';

var Manager = function (_Component) {
  babelHelpers.inherits(Manager, _Component);

  function Manager() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, Manager);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Manager.__proto__ || Object.getPrototypeOf(Manager)).call.apply(_ref, [this].concat(args))), _this), _this._setTargetNode = function (node) {
      _this._targetNode = node;
    }, _this._getTargetNode = function () {
      return _this._targetNode;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(Manager, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        popperManager: {
          setTargetNode: this._setTargetNode,
          getTargetNode: this._getTargetNode
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          tag = _props.tag,
          children = _props.children,
          restProps = babelHelpers.objectWithoutProperties(_props, ['tag', 'children']);

      if (tag !== false) {
        return createElement(tag, restProps, children);
      } else {
        return children;
      }
    }
  }]);
  return Manager;
}(Component);

Manager.childContextTypes = {
  popperManager: PropTypes.object.isRequired
};
Manager.propTypes = {
  tag: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
};
Manager.defaultProps = {
  tag: 'div'
};


export default Manager;